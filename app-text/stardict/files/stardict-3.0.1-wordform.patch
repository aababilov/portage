diff -Naur stardict-3.0.1.orig/configure.in stardict-3.0.1/configure.in
--- stardict-3.0.1.orig/configure.in	2011-05-17 14:58:54.000000000 +0300
+++ stardict-3.0.1/configure.in	2011-05-17 13:35:19.000000000 +0300
@@ -294,6 +294,17 @@
 fi
 AC_SUBST(WIKI_PARSEDATA_PLUGIN_DIR)
 
+AC_ARG_ENABLE([wordform],
+	AS_HELP_STRING([--disable-wordform],[Disable wordform virtual dict plugin (default: enabled)]),
+	[enable_wordform=$enableval],
+	[enable_wordform=yes])
+if test "x$enable_wordform" = "xyes" ; then
+	WORDFORM_PLUGIN_DIR="stardict-wordform-plugin"
+else
+	WORDFORM_PLUGIN_DIR=
+fi
+AC_SUBST(WORDFORM_PLUGIN_DIR)
+
 dnl ================================================================
 dnl main program checks.
 dnl ================================================================
@@ -481,6 +492,7 @@
 stardict-plugins/stardict-wordnet-plugin/Makefile
 stardict-plugins/stardict-html-parsedata-plugin/Makefile
 stardict-plugins/stardict-sapi-tts-plugin/Makefile
+stardict-plugins/stardict-wordform-plugin/Makefile
 tests/Makefile
 pixmaps/Makefile
 help/Makefile
diff -Naur stardict-3.0.1.orig/po/POTFILES.in stardict-3.0.1/po/POTFILES.in
--- stardict-3.0.1.orig/po/POTFILES.in	2007-11-05 07:24:40.000000000 +0200
+++ stardict-3.0.1/po/POTFILES.in	2011-05-17 13:35:11.000000000 +0300
@@ -36,6 +36,7 @@
 stardict-plugins/stardict-spell-plugin/stardict_spell.cpp
 stardict-plugins/stardict-update-info-plugin/stardict_update_info.cpp
 stardict-plugins/stardict-wiki-parsedata-plugin/stardict_wiki_parsedata.cpp
+stardict-plugins/stardict-wordform-plugin/stardict_wordform.cpp
 stardict-plugins/stardict-wordnet-plugin/stardict_wordnet.cpp
 stardict-plugins/stardict-wordnet-plugin/stardict_wordnet_parsedata.cpp
 stardict-plugins/stardict-xdxf-parsedata-plugin/stardict_xdxf_parsedata.cpp
diff -Naur stardict-3.0.1.orig/src/conf.cpp stardict-3.0.1/src/conf.cpp
--- stardict-3.0.1.orig/src/conf.cpp	2007-10-30 10:05:35.000000000 +0200
+++ stardict-3.0.1/src/conf.cpp	2011-05-17 13:35:11.000000000 +0300
@@ -147,6 +147,16 @@
 #endif
 	add_entry("/apps/stardict/manage_dictionaries/treedict_dirs_list", dirs);
 
+	dirs.clear();
+	dirs.push_back(gStarDictDataDir+ G_DIR_SEPARATOR_S "wform");
+#ifndef _WIN32
+	if (gStarDictDataDir != "/usr/share/stardict") {
+		dirs.push_back("/usr/share/stardict/wform");
+	}
+	dirs.push_back(std::string(g_get_home_dir())+"/.stardict/wform");
+#endif
+	add_entry("/apps/stardict/manage_dictionaries/wform_dirs_list", dirs);
+
   Load();
 }
 //---------------------------------------------------------------------------------
diff -Naur stardict-3.0.1.orig/src/lib/stddict.cpp stardict-3.0.1/src/lib/stddict.cpp
--- stardict-3.0.1.orig/src/lib/stddict.cpp	2011-05-17 14:58:54.000000000 +0300
+++ stardict-3.0.1/src/lib/stddict.cpp	2011-05-30 10:27:55.000000000 +0300
@@ -2601,286 +2601,6 @@
 		}
 	}
 
-	if (bIsPureEnglish(sWord)) {
-		// If not Found , try other status of sWord.
-		size_t iWordLen=strlen(sWord);
-		bool isupcase;
-
-		gchar *sNewWord = (gchar *)g_malloc(iWordLen + 1);
-
-		//cut one char "s" or "d"
-		if(!bFound && iWordLen>1) {
-			isupcase = sWord[iWordLen-1]=='S' || !strncmp(&sWord[iWordLen-2],"ED",2);
-			if (isupcase || sWord[iWordLen-1]=='s' || !strncmp(&sWord[iWordLen-2],"ed",2)) {
-				strcpy(sNewWord,sWord);
-				sNewWord[iWordLen-1]='\0'; // cut "s" or "d"
-				if (oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-					bFound=true;
-				else if (isupcase || g_ascii_isupper(sWord[0])) {
-					casestr = g_ascii_strdown(sNewWord, -1);
-					if (strcmp(casestr, sNewWord)) {
-						if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-							bFound=true;
-					}
-					g_free(casestr);
-				}
-			}
-		}
-
-		//cut "ly"
-		if(!bFound && iWordLen>2) {
-			isupcase = !strncmp(&sWord[iWordLen-2],"LY",2);
-			if (isupcase || (!strncmp(&sWord[iWordLen-2],"ly",2))) {
-				strcpy(sNewWord,sWord);
-				sNewWord[iWordLen-2]='\0';  // cut "ly"
-				if (iWordLen>5 && sNewWord[iWordLen-3]==sNewWord[iWordLen-4]
-				    && !bIsVowel(sNewWord[iWordLen-4]) &&
-				    bIsVowel(sNewWord[iWordLen-5])) {//doubled
-
-					sNewWord[iWordLen-3]='\0';
-					if(oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-						bFound=true;
-					else {
-						if (isupcase || g_ascii_isupper(sWord[0])) {
-							casestr = g_ascii_strdown(sNewWord, -1);
-							if (strcmp(casestr, sNewWord)) {
-								if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-									bFound=true;
-							}
-							g_free(casestr);
-						}
-						if (!bFound)
-							sNewWord[iWordLen-3]=sNewWord[iWordLen-4];  //restore
-					}
-				}
-				if (!bFound) {
-					if (oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-						bFound=true;
-					else if (isupcase || g_ascii_isupper(sWord[0])) {
-						casestr = g_ascii_strdown(sNewWord, -1);
-						if (strcmp(casestr, sNewWord)) {
-							if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-								bFound=true;
-						}
-						g_free(casestr);
-					}
-				}
-			}
-		}
-
-		//cut "ing"
-		if(!bFound && iWordLen>3) {
-			isupcase = !strncmp(&sWord[iWordLen-3],"ING",3);
-			if (isupcase || !strncmp(&sWord[iWordLen-3],"ing",3) ) {
-				strcpy(sNewWord,sWord);
-				sNewWord[iWordLen-3]='\0';
-				if ( iWordLen>6 && (sNewWord[iWordLen-4]==sNewWord[iWordLen-5])
-				     && !bIsVowel(sNewWord[iWordLen-5]) &&
-				     bIsVowel(sNewWord[iWordLen-6])) {  //doubled
-					sNewWord[iWordLen-4]='\0';
-					if (oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-						bFound=true;
-					else {
-						if (isupcase || g_ascii_isupper(sWord[0])) {
-							casestr = g_ascii_strdown(sNewWord, -1);
-							if (strcmp(casestr, sNewWord)) {
-								if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-									bFound=true;
-							}
-							g_free(casestr);
-						}
-						if (!bFound)
-							sNewWord[iWordLen-4]=sNewWord[iWordLen-5];  //restore
-					}
-				}
-				if( !bFound ) {
-					if (oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-						bFound=true;
-					else if (isupcase || g_ascii_isupper(sWord[0])) {
-						casestr = g_ascii_strdown(sNewWord, -1);
-						if (strcmp(casestr, sNewWord)) {
-							if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-								bFound=true;
-						}
-						g_free(casestr);
-					}
-				}
-				if(!bFound) {
-					if (isupcase)
-						strcat(sNewWord,"E"); // add a char "E"
-					else
-						strcat(sNewWord,"e"); // add a char "e"
-					if(oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-						bFound=true;
-					else if (isupcase || g_ascii_isupper(sWord[0])) {
-						casestr = g_ascii_strdown(sNewWord, -1);
-						if (strcmp(casestr, sNewWord)) {
-							if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-								bFound=true;
-						}
-						g_free(casestr);
-					}
-				}
-			}
-		}
-
-		//cut two char "es"
-		if(!bFound && iWordLen>3) {
-			isupcase = (!strncmp(&sWord[iWordLen-2],"ES",2) &&
-				    (sWord[iWordLen-3] == 'S' ||
-				     sWord[iWordLen-3] == 'X' ||
-				     sWord[iWordLen-3] == 'O' ||
-				     (iWordLen >4 && sWord[iWordLen-3] == 'H' &&
-				      (sWord[iWordLen-4] == 'C' ||
-				       sWord[iWordLen-4] == 'S'))));
-			if (isupcase ||
-			    (!strncmp(&sWord[iWordLen-2],"es",2) &&
-			     (sWord[iWordLen-3] == 's' || sWord[iWordLen-3] == 'x' ||
-			      sWord[iWordLen-3] == 'o' ||
-			      (iWordLen >4 && sWord[iWordLen-3] == 'h' &&
-			       (sWord[iWordLen-4] == 'c' || sWord[iWordLen-4] == 's'))))) {
-				strcpy(sNewWord,sWord);
-				sNewWord[iWordLen-2]='\0';
-				if(oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-					bFound=true;
-				else if (isupcase || g_ascii_isupper(sWord[0])) {
-					casestr = g_ascii_strdown(sNewWord, -1);
-					if (strcmp(casestr, sNewWord)) {
-						if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-							bFound=true;
-					}
-					g_free(casestr);
-				}
-			}
-		}
-
-		//cut "ed"
-		if (!bFound && iWordLen>3) {
-			isupcase = !strncmp(&sWord[iWordLen-2],"ED",2);
-			if (isupcase || !strncmp(&sWord[iWordLen-2],"ed",2)) {
-				strcpy(sNewWord,sWord);
-				sNewWord[iWordLen-2]='\0';
-				if (iWordLen>5 && (sNewWord[iWordLen-3]==sNewWord[iWordLen-4])
-				    && !bIsVowel(sNewWord[iWordLen-4]) &&
-				    bIsVowel(sNewWord[iWordLen-5])) {//doubled
-					sNewWord[iWordLen-3]='\0';
-					if (oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-						bFound=true;
-					else {
-						if (isupcase || g_ascii_isupper(sWord[0])) {
-							casestr = g_ascii_strdown(sNewWord, -1);
-							if (strcmp(casestr, sNewWord)) {
-								if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-									bFound=true;
-							}
-							g_free(casestr);
-						}
-						if (!bFound)
-							sNewWord[iWordLen-3]=sNewWord[iWordLen-4];  //restore
-					}
-				}
-				if (!bFound) {
-					if (oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-						bFound=true;
-					else if (isupcase || g_ascii_isupper(sWord[0])) {
-						casestr = g_ascii_strdown(sNewWord, -1);
-						if (strcmp(casestr, sNewWord)) {
-							if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-								bFound=true;
-						}
-						g_free(casestr);
-					}
-				}
-			}
-		}
-
-		// cut "ied" , add "y".
-		if (!bFound && iWordLen>3) {
-			isupcase = !strncmp(&sWord[iWordLen-3],"IED",3);
-			if (isupcase || (!strncmp(&sWord[iWordLen-3],"ied",3))) {
-				strcpy(sNewWord,sWord);
-				sNewWord[iWordLen-3]='\0';
-				if (isupcase)
-					strcat(sNewWord,"Y"); // add a char "Y"
-				else
-					strcat(sNewWord,"y"); // add a char "y"
-				if (oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-					bFound=true;
-				else if (isupcase || g_ascii_isupper(sWord[0])) {
-					casestr = g_ascii_strdown(sNewWord, -1);
-					if (strcmp(casestr, sNewWord)) {
-						if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-							bFound=true;
-					}
-					g_free(casestr);
-				}
-			}
-		}
-
-		// cut "ies" , add "y".
-		if (!bFound && iWordLen>3) {
-			isupcase = !strncmp(&sWord[iWordLen-3],"IES",3);
-			if (isupcase || (!strncmp(&sWord[iWordLen-3],"ies",3))) {
-				strcpy(sNewWord,sWord);
-				sNewWord[iWordLen-3]='\0';
-				if (isupcase)
-					strcat(sNewWord,"Y"); // add a char "Y"
-				else
-					strcat(sNewWord,"y"); // add a char "y"
-				if(oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-					bFound=true;
-				else if (isupcase || g_ascii_isupper(sWord[0])) {
-					casestr = g_ascii_strdown(sNewWord, -1);
-					if (strcmp(casestr, sNewWord)) {
-						if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-							bFound=true;
-					}
-					g_free(casestr);
-				}
-			}
-		}
-
-		// cut "er".
-		if (!bFound && iWordLen>2) {
-			isupcase = !strncmp(&sWord[iWordLen-2],"ER",2);
-			if (isupcase || (!strncmp(&sWord[iWordLen-2],"er",2))) {
-				strcpy(sNewWord,sWord);
-				sNewWord[iWordLen-2]='\0';
-				if(oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-					bFound=true;
-				else if (isupcase || g_ascii_isupper(sWord[0])) {
-					casestr = g_ascii_strdown(sNewWord, -1);
-					if (strcmp(casestr, sNewWord)) {
-						if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-							bFound=true;
-					}
-					g_free(casestr);
-				}
-			}
-		}
-
-		// cut "est".
-		if (!bFound && iWordLen>3) {
-			isupcase = !strncmp(&sWord[iWordLen-3], "EST", 3);
-			if (isupcase || (!strncmp(&sWord[iWordLen-3],"est", 3))) {
-				strcpy(sNewWord,sWord);
-				sNewWord[iWordLen-3]='\0';
-				if(oLib[iLib]->Lookup(sNewWord, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-					bFound=true;
-				else if (isupcase || g_ascii_isupper(sWord[0])) {
-					casestr = g_ascii_strdown(sNewWord, -1);
-					if (strcmp(casestr, sNewWord)) {
-						if(oLib[iLib]->Lookup(casestr, iIndex, idx_suggest, EnableCollationLevel, servercollatefunc))
-							bFound=true;
-					}
-					g_free(casestr);
-				}
-			}
-		}
-
-		g_free(sNewWord);
-	}
-
 	if (bFound)
 		iWordIndex = iIndex;
 #if 0
diff -Naur stardict-3.0.1.orig/src/Makefile.am stardict-3.0.1/src/Makefile.am
--- stardict-3.0.1.orig/src/Makefile.am	2011-05-17 14:59:06.000000000 +0300
+++ stardict-3.0.1/src/Makefile.am	2011-05-17 13:35:31.000000000 +0300
@@ -25,7 +25,7 @@
 
 
 stardict_DEPENDENCIES = $(LOCAL_SIGCPP_LIBFILE) lib/libstardict.a
-stardict_LDFLAGS = 
+stardict_LDFLAGS = -rdynamic
 stardict_LDADD = $(STARDICT_LIBS) $(LOCAL_SIGCPP_LIBFILE) lib/libstardict.a
 
 if !GNOME_SUPPORT
diff -Naur stardict-3.0.1.orig/stardict-plugins/Makefile.am stardict-3.0.1/stardict-plugins/Makefile.am
--- stardict-3.0.1.orig/stardict-plugins/Makefile.am	2011-05-17 14:59:06.000000000 +0300
+++ stardict-3.0.1/stardict-plugins/Makefile.am	2011-05-30 10:43:58.000000000 +0300
@@ -1,3 +1,3 @@
-DIST_SUBDIRS = stardict-dictdotcn-plugin stardict-advertisement-plugin stardict-man-plugin stardict-update-info-plugin stardict-html-parsedata-plugin stardict-xdxf-parsedata-plugin stardict-wordnet-plugin stardict-powerword-parsedata-plugin stardict-wiki-parsedata-plugin stardict-spell-plugin stardict-gucharmap-plugin stardict-festival-tts-plugin stardict-espeak-tts-plugin stardict-sapi-tts-plugin stardict-qqwry-plugin
+DIST_SUBDIRS = stardict-dictdotcn-plugin stardict-advertisement-plugin stardict-man-plugin stardict-update-info-plugin stardict-html-parsedata-plugin stardict-xdxf-parsedata-plugin stardict-wordnet-plugin stardict-powerword-parsedata-plugin stardict-wiki-parsedata-plugin stardict-spell-plugin stardict-gucharmap-plugin stardict-festival-tts-plugin stardict-espeak-tts-plugin stardict-sapi-tts-plugin stardict-qqwry-plugin stardict-wordform-plugin
 
-SUBDIRS = $(DICTDOTCN_PLUGIN_DIR) $(ADVERTISEMENT_PLUGIN_DIR) $(MAN_PLUGIN_DIR) $(UPDATE_INFO_PLUGIN_DIR) $(HTML_PARSEDATA_PLUGIN_DIR) $(XDXF_PARSEDATA_PLUGIN_DIR) $(WORDNET_PLUGIN_DIR) $(POWERWORD_PARSEDATA_PLUGIN_DIR) $(WIKI_PARSEDATA_PLUGIN_DIR) $(SPELL_PLUGIN_DIR) $(GUCHARMAP_PLUGIN_DIR) $(FESTIVAL_PLUGIN_DIR) $(ESPEAK_PLUGIN_DIR) $(QQWRY_PLUGIN_DIR) stardict-sapi-tts-plugin
+SUBDIRS = $(DICTDOTCN_PLUGIN_DIR) $(ADVERTISEMENT_PLUGIN_DIR) $(MAN_PLUGIN_DIR) $(UPDATE_INFO_PLUGIN_DIR) $(HTML_PARSEDATA_PLUGIN_DIR) $(XDXF_PARSEDATA_PLUGIN_DIR) $(WORDNET_PLUGIN_DIR) $(POWERWORD_PARSEDATA_PLUGIN_DIR) $(WIKI_PARSEDATA_PLUGIN_DIR) $(SPELL_PLUGIN_DIR) $(GUCHARMAP_PLUGIN_DIR) $(FESTIVAL_PLUGIN_DIR) $(ESPEAK_PLUGIN_DIR) $(QQWRY_PLUGIN_DIR) $(WORDFORM_PLUGIN_DIR) stardict-sapi-tts-plugin
diff -Naur stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/Makefile.am stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/Makefile.am
--- stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/Makefile.am	1970-01-01 03:00:00.000000000 +0300
+++ stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/Makefile.am	2011-05-17 13:35:31.000000000 +0300
@@ -0,0 +1,18 @@
+EXTRA_DIST = stardict_wordform.v
+
+
+LD_VERSION_SCRIPT_OPTION="-Wl,--version-script=stardict_wordform.v"
+
+noinst_HEADERS = stardict_wordform.h wordform.hpp
+
+stardict_wordform_LTLIBRARIES = stardict_wordform.la
+
+stardict_wordformdir = $(libdir)/stardict/plugins
+
+stardict_wordform_la_SOURCES = stardict_wordform.cpp wordform.cpp
+
+stardict_wordform_la_LDFLAGS = 	-avoid-version \
+					-module \
+					$(LD_VERSION_SCRIPT_OPTION)
+
+INCLUDES = @STARDICT_CFLAGS@
diff -Naur stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/stardict_wordform.cpp stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/stardict_wordform.cpp
--- stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/stardict_wordform.cpp	1970-01-01 03:00:00.000000000 +0300
+++ stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/stardict_wordform.cpp	2011-05-30 11:12:12.000000000 +0300
@@ -0,0 +1,206 @@
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "stardict_wordform.h"
+#include <glib/gi18n.h>
+#include <cstring>
+#include <string>
+
+#include "wordform.hpp"
+#include <src/conf.h>
+#include <src/stardict.h>
+#include <src/lib/file.hpp>
+
+using namespace std;
+map<string, WordForm> wordforms;
+
+string cut_lang(const string &filename)
+{
+	size_t slash = filename.rfind('/');
+	if (slash == filename.npos) {
+		return "";
+	}
+	return filename.substr(slash + 1, filename.length() - slash - 4);
+}
+
+void str_lower(string &s)
+{
+	for (size_t i = 0; s[i]; ++i) {
+		s[i] = tolower(s[i]);
+	}
+}
+
+map<string, WordForm>::iterator find_word_form(const std::string &group_name)
+{
+	map<string, WordForm>::iterator iter;
+	string lang;
+	for (size_t i = 1; i <= group_name.length(); ++i) {
+		lang = group_name.substr(0, i);
+		iter = wordforms.find(lang);
+		if (iter != wordforms.end())
+			return iter;
+	}
+	return wordforms.end();
+}
+
+map<string, WordForm>::iterator get_word_form(std::string group_name)
+{
+	if (group_name.empty())
+		return wordforms.end();
+	str_lower(group_name);
+	size_t open_br = group_name.rfind('(');
+	if (open_br != group_name.npos && open_br < group_name.length() - 2) {
+		string substr= group_name.substr(open_br + 1,
+				group_name.length() - 1 - open_br);
+		map<string, WordForm>::iterator wf = find_word_form(substr);
+		if (wf != wordforms.end())
+			return wf;
+	}
+	return find_word_form(group_name);
+}
+
+class WordFormAdder {
+public:
+	void operator()(const std::string& url, bool disable)
+	{
+		string lang = cut_lang(url);
+		if (lang.empty())
+			return;
+		str_lower(lang);
+		g_print("word forms: %s\n", lang.c_str());
+		wordforms[lang].load(url);
+	}
+};
+
+static char *build_dictdata(char type, const char *definition)
+{
+	size_t len = strlen(definition);
+	guint32 size;
+	size = sizeof(char) + len + 1;
+	char *data = (char *) g_malloc(sizeof(guint32) + size);
+	char *p = data;
+	*((guint32 *) p) = size;
+	p += sizeof(guint32);
+	*p = type;
+	p++;
+	memcpy(p, definition, len + 1);
+	return data;
+}
+
+string get_suggestions(const string &word)
+{
+	std::string active_group = gpAppFrame->dictinfo.active_group;
+	map<string, WordForm>::iterator wf_iter = get_word_form(active_group);
+	if (wf_iter == wordforms.end()) {
+		return "";
+	}
+	WordForm *wordform = &wf_iter->second;
+	string s, first;
+	string xdxf_out = "";
+	string suggested_refs = "";
+	set<string> suggested_words;
+	int suggested_count = 0;
+	{
+		typedef WordForm::ByFormMap::iterator FormIter;
+		std::pair<FormIter, FormIter> base_bounds =
+				wordform->by_form().equal_range(word);
+		for (FormIter i = base_bounds.first; i != base_bounds.second; ++i) {
+			s = i->second;
+			if (suggested_words.count(s) == 0) {
+				suggested_refs += "<kref>" + s + "</kref>  ";
+				suggested_words.insert(s);
+				++suggested_count;
+			}
+		}
+	}
+	if (!suggested_refs.empty()) {
+		xdxf_out +=  string("<b>")
+			+ _("Explicit forms") + "</b>\n" +
+			suggested_refs;
+		suggested_refs = "";
+	}
+	for (int ending_len = std::min(wordform->max_ending_l(),
+			word.length() - 1); ending_len >= 1; --ending_len) {
+		std::string ending = word.substr(word.length() - ending_len);
+		WordForm::Endings::iterator e_iter = wordform->endings().find(
+				ending);
+		if (e_iter != wordform->endings().end()) {
+			first = word.substr(0, word.length() - ending_len);
+			for (WordForm::StringSet::iterator i_curr_ending =
+					e_iter->second.begin(); i_curr_ending
+					!= e_iter->second.end(); ++i_curr_ending) {
+				s = first + *i_curr_ending;
+				if (suggested_words.count(s) == 0) {
+					suggested_refs += "<kref>" + s + "</kref>  ";
+					suggested_words.insert(s);
+					++suggested_count;
+				}
+			}
+		}
+	}
+	if (!suggested_refs.empty()) {
+		if (!xdxf_out.empty()) {
+			xdxf_out += "\n";
+		}
+		xdxf_out += string("<b>") + _("Implicit forms") + "</b>\n" +
+			suggested_refs;
+	}
+	return xdxf_out;
+}
+
+static void lookup(const char *text, char ***pppWord, char ****ppppWordData)
+{
+	gchar *casestr = g_utf8_strdown(text, -1);
+	string xdxf_out = get_suggestions(casestr);
+	g_free(casestr);
+	if (xdxf_out.empty()) {
+		*pppWord = NULL;
+		return;
+	}
+	*pppWord = (gchar **) g_malloc(sizeof(gchar *) * 2);
+	(*pppWord)[0] = g_strdup(text);
+	(*pppWord)[1] = NULL;
+	*ppppWordData = (gchar ***) g_malloc(sizeof(gchar **) * (1));
+	(*ppppWordData)[0] = (gchar **) g_malloc(sizeof(gchar *) * 2);
+	(*ppppWordData)[0][0] = build_dictdata('x', xdxf_out.c_str());
+	(*ppppWordData)[0][1] = NULL;
+}
+
+static void configure()
+{
+}
+
+bool stardict_plugin_init(StarDictPlugInObject *obj)
+{
+	if (strcmp(obj->version_str, PLUGIN_SYSTEM_VERSION) != 0) {
+		g_print("Error: WordForm plugin version doesn't match!\n");
+		return true;
+	}
+	obj->type = StarDictPlugInType_VIRTUALDICT;
+	obj->info_xml
+			= g_strdup_printf(
+					"<plugin_info><name>%s</name><version>1.0</version><short_desc>%s</short_desc><long_desc>%s</long_desc><author>Alessio Ababilov &lt;ilovedevlinux@gmail.com&gt;</author><website>http://stardict.sourceforge.net</website></plugin_info>",
+					_("WordForm"), _("Worm Form virtual dictionary."),
+					_("Show the word forms."));
+	obj->configure_func = configure;
+
+	for_each_file(
+			conf->get_strlist(
+					"/apps/stardict/manage_dictionaries/wform_dirs_list"),
+			".wf", List(), List(), WordFormAdder());
+
+	return false;
+}
+
+void stardict_plugin_exit(void)
+{
+}
+
+bool stardict_virtualdict_plugin_init(StarDictVirtualDictPlugInObject *obj)
+{
+	obj->lookup_func = lookup;
+	obj->dict_name = _("WordForm");
+	g_print(_("WordForm plug-in loaded.\n"));
+	return false;
+}
diff -Naur stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/stardict_wordform.h stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/stardict_wordform.h
--- stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/stardict_wordform.h	1970-01-01 03:00:00.000000000 +0300
+++ stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/stardict_wordform.h	2011-05-17 12:55:01.000000000 +0300
@@ -0,0 +1,13 @@
+#ifndef _STARDICT_MAN_PLUGIN_H_
+#define _STARDICT_MAN_PLUGIN_H_
+
+#include "../../src/lib/plugin.h"
+#include "../../src/lib/virtualdictplugin.h"
+
+extern "C" {
+	extern bool stardict_plugin_init(StarDictPlugInObject *obj);
+	extern void stardict_plugin_exit(void);
+	extern bool stardict_virtualdict_plugin_init(StarDictVirtualDictPlugInObject *obj);
+}
+
+#endif
diff -Naur stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/stardict_wordform.v stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/stardict_wordform.v
--- stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/stardict_wordform.v	1970-01-01 03:00:00.000000000 +0300
+++ stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/stardict_wordform.v	2011-05-17 13:35:11.000000000 +0300
@@ -0,0 +1,10 @@
+{
+	global:
+		extern "C" {
+			stardict_plugin_init;
+			stardict_plugin_exit;
+			stardict_virtualdict_plugin_init;
+		};
+	local:
+		*;
+};
diff -Naur stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/wordform.cpp stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/wordform.cpp
--- stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/wordform.cpp	1970-01-01 03:00:00.000000000 +0300
+++ stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/wordform.cpp	2011-05-30 10:43:23.000000000 +0300
@@ -0,0 +1,119 @@
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include "wordform.hpp"
+
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+
+#include <cstdarg>
+
+#include <vector>
+#include <algorithm>
+
+#include <glib.h>
+
+using namespace std;
+
+enum {
+	DEPTH = 2
+};
+
+string word_prefix(const string &word)
+{
+	return word.length() > DEPTH ? word.substr(0, DEPTH) : word;
+}
+
+bool WordSet::have_word(const string &word)
+{
+	return words[word_prefix(word)].count(word) > 0;
+}
+
+void WordSet::add(const string &word)
+{
+	words[word_prefix(word)].insert(word);
+}
+
+void WordSet::print()
+{
+	for (map<string, set<string> >::iterator i = words.begin(); i
+			!= words.end(); ++i) {
+		printf("~%s\n\t", i->first.c_str());
+		for (set<string>::iterator j = i->second.begin(); j
+				!= i->second.end(); ++j) {
+			printf("%s ", j->c_str());
+		}
+		printf("\n");
+	}
+}
+
+void WordForm::add(const string &base, const string &form)
+{
+	if (_work_with == WITH_ENDING) {
+		_endings[form].insert(base);
+		if (_max_ending_l < form.length()) {
+			_max_ending_l = form.length();
+		}
+	} else {
+		_by_form.insert(make_pair(form, base));
+	}
+}
+
+void WordForm::add_pair(const string &k_word, string trans_part)
+{
+	if (trans_part.empty())
+		return;
+	char *saveptr;
+	const char *delim = " \n\r\t\v\b";
+	char *token = strtok_r(&trans_part[0], delim, &saveptr);
+	while (token) {
+		for (int i = 0; token[i]; ++i) {
+			token[i] = tolower(token[i]);
+		}
+		add(k_word, token);
+		//printf("added %s %s\n", k_word.c_str(),  p);
+		token = strtok_r(NULL, delim, &saveptr);
+	}
+}
+
+void WordForm::load(const string &filename)
+{
+	FILE *f_wordform = fopen(filename.c_str(), "rt");
+	if (f_wordform == NULL)
+		return;
+
+	string k_word, trans_part;
+	char s[1024 * 4];
+	_work_with = WITH_FORM;
+	while (!feof(f_wordform) && fgets(s, sizeof(s), f_wordform) != NULL) {
+		if (s[0] == 0)
+			continue;
+		if (s[0] == '~' || s[0] == '-') {
+			//this is a key or an ending
+			add_pair(k_word, trans_part);
+			_work_with = s[0] == '~' ? WITH_FORM : WITH_ENDING;
+			char *p = &s[1];
+			while (*p && !g_unichar_isspace(g_utf8_get_char(p)))
+				p = g_utf8_next_char(p);
+			*p = 0;
+			k_word = &s[1];
+			trans_part = "";
+		} else {
+			trans_part += s;
+		}
+	}
+	add_pair(k_word, trans_part);
+	fclose(f_wordform);
+}
+
+bool WordForm::is_wordform(const string &word)
+{
+	return _by_form.count(word) > 0;
+}
+
+WordForm::WordForm()
+{
+	_max_ending_l = 0;
+}
diff -Naur stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/wordform.hpp stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/wordform.hpp
--- stardict-3.0.1.orig/stardict-plugins/stardict-wordform-plugin/wordform.hpp	1970-01-01 03:00:00.000000000 +0300
+++ stardict-3.0.1/stardict-plugins/stardict-wordform-plugin/wordform.hpp	2011-05-30 10:43:33.000000000 +0300
@@ -0,0 +1,44 @@
+#ifndef WORDFORM_HPP
+#define WORDFORM_HPP
+
+#include <string>
+#include <map>
+#include <set>
+
+class WordSet {
+public:
+	bool have_word(const std::string &word);
+	void add(const std::string &word);
+
+	void print();
+private:
+	std::map<std::string, std::set<std::string> > words;
+};
+
+class WordForm {
+public:
+	typedef std::multimap<std::string, std::string> ByFormMap;
+	typedef std::set<std::string> StringSet;
+	typedef std::map<std::string, StringSet> Endings;
+public:
+	WordForm();
+
+	bool is_wordform(const std::string &word);
+
+	void add(const std::string &word);
+	void add(const std::string &base, const std::string &form);
+
+	void load(const std::string &filename);
+	ByFormMap &by_form() {return _by_form; }
+	Endings &endings() { return _endings; }
+	size_t max_ending_l() { return _max_ending_l; }
+private:
+	void add_pair(const std::string &k_word, std::string trans_part);
+
+	ByFormMap _by_form;
+	Endings _endings;
+	size_t _max_ending_l;
+	enum WorkWith { WITH_ENDING, WITH_FORM } _work_with;
+};
+
+#endif
